{"version":3,"file":"static/js/191.61db8d49.chunk.js","mappings":"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","sources":["components/Generales/MCcolores/mccolores.jsx","components/Generales/MCiconos/mciconos.jsx","components/Grupos/MClistcategorias/mclistcategorias.jsx","components/Grupos/MCnewcategoria/mcnewcategoria.jsx","pages/Grupos/InfoGrupo/Categorias/newcategoria.jsx"],"sourcesContent":["import React from \"react\";\r\nimport \"swiper/css\";\r\nimport \"swiper/css/navigation\";\r\nimport { Swiper, SwiperSlide } from \"swiper/react\";\r\nimport \"./mccolores.css\";\r\n\r\nconst MCcolores = (props) => {\r\n  const colores = [\r\n    \"#F44336\",\r\n    \"#9B59B6\",\r\n    \"#5499C7\",\r\n    \"#76D7C4\",\r\n    \"#7DCEA0\",\r\n    \"#F7DC6F\",\r\n    \"#E59866\",\r\n    \"#36f443\",\r\n    \"#4336f4\",\r\n    \"#f436a8\",\r\n    \"#9e36f4\",\r\n    \"#36f488\",\r\n    \"#f47f36\",\r\n  ];\r\n  return (\r\n    <div className=\"color-component\">\r\n      <span className=\"info\">\r\n        Selecciona un color <span className=\"required\">*</span>\r\n      </span>\r\n      <hr\r\n        className=\"separador-color\"\r\n        style={{\r\n          backgroundColor: props.colorSelected,\r\n        }}\r\n      />\r\n\r\n      <div className=\"color-list\">\r\n        <Swiper slidesPerView={5} loop={true} className=\"mySwiper\">\r\n          {colores\r\n            ? colores.map((c, index) => (\r\n                <SwiperSlide\r\n                  className={\r\n                    props.colorSelected == c ? \"color selected\" : \"color\"\r\n                  }\r\n                  style={\r\n                    props.colorSelected == c\r\n                      ? {\r\n                          borderColor: c,\r\n                          borderWidth: \"3px\",\r\n                          borderStyle: \"solid\",\r\n                        }\r\n                      : {}\r\n                  }\r\n                  key={index}\r\n                  onClick={() => {\r\n                    props.onChange(c);\r\n                  }}\r\n                >\r\n                  <div\r\n                    className=\"circle\"\r\n                    style={{\r\n                      backgroundColor: c,\r\n                    }}\r\n                  ></div>\r\n                </SwiperSlide>\r\n              ))\r\n            : \"No hay colores disponibles\"}\r\n        </Swiper>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MCcolores;\r\n","import { Swiper, SwiperSlide } from \"swiper/react\";\r\nimport \"swiper/css\";\r\nimport \"swiper/css/navigation\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"./mciconos.css\";\r\nimport DynamicFaIcon from \"components/Generales/DynamicIcons/DynamicIcons\";\r\nimport {\r\n  iconosCuentas,\r\n  iconosGrupos,\r\n  iconosCategorias,\r\n} from \"global/functions\";\r\n\r\nconst MCiconos = (props) => {\r\n  const [iconos, setIconos] = useState(iconosCuentas);\r\n\r\n  useEffect(() => {\r\n    switch (props.type) {\r\n      case \"group\":\r\n        setIconos(iconosGrupos);\r\n        break;\r\n      case \"cuentas\":\r\n        setIconos(iconosCuentas);\r\n        break;\r\n      case \"categories\":\r\n        setIconos(iconosCategorias);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }, [props.type]);\r\n\r\n  return (\r\n    <div className=\"icono-component\">\r\n      <span className=\"info\">\r\n        Selecciona un icono <span className=\"required\">*</span>\r\n      </span>\r\n      <div className=\"icono-list\">\r\n        <Swiper slidesPerView={5} loop={true} className=\"mySwiper\">\r\n          {iconos\r\n            ? iconos.map((i, index) => (\r\n                <SwiperSlide\r\n                  className={\r\n                    props.iconoSelected == i ? \"icono selected\" : \"icono\"\r\n                  }\r\n                  style={\r\n                    props.iconoSelected == i\r\n                      ? {\r\n                          borderColor: props.colorSelected,\r\n                          borderWidth: \"3px\",\r\n                          borderStyle: \"solid\",\r\n                        }\r\n                      : {}\r\n                  }\r\n                  key={index}\r\n                  onClick={() => {\r\n                    props.onChange(i);\r\n                  }}\r\n                >\r\n                  <DynamicFaIcon name={i} color={props.colorSelected} />\r\n                </SwiperSlide>\r\n              ))\r\n            : \"No hay iconos disponibles\"}\r\n        </Swiper>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MCiconos;\r\n","import {\r\n  IonAlert,\r\n  IonItem,\r\n  IonLabel,\r\n  IonList,\r\n  IonToast,\r\n  IonContent,\r\n} from \"@ionic/react\";\r\nimport DynamicFaIcon from \"components/Generales/DynamicIcons/DynamicIcons\";\r\nimport useGrupos from \"hooks/useGrupos\";\r\nimport { informationCircle } from \"ionicons/icons\";\r\nimport React, { useState } from \"react\";\r\nimport \"swiper/css\";\r\nimport \"swiper/css/navigation\";\r\nimport \"./mclistcategorias.css\";\r\n\r\nconst MClistcategorias = ({ grupo }) => {\r\n  console.log(\"MClistcategorias\", grupo);\r\n  const {\r\n    grupos,\r\n    loadinggrupos,\r\n    setError,\r\n    error,\r\n    success,\r\n    setSuccess,\r\n    deleteCategoria,\r\n  } = useGrupos();\r\n  const [isConfirmOpen, setIsConfirmOpen] = useState(false);\r\n  const [selected, setSelected] = useState({});\r\n\r\n  return (\r\n    <>\r\n      {grupo ? (\r\n        <IonList className=\"lista-categorias\">\r\n          {grupo.categories\r\n            ? grupo.categories.map((c, index) => (\r\n                <IonItem className=\"cuenta-item\" key={index}>\r\n                  <div className=\"cuenta-name-info\">\r\n                    <DynamicFaIcon name={c.icono} color={c.color} />\r\n                    <IonLabel className=\"cuenta-name\">{c.name}</IonLabel>\r\n                  </div>\r\n\r\n                  <div className=\"cuenta-options\" slot=\"end\">\r\n                    <div\r\n                      className=\"delete\"\r\n                      onClick={() => {\r\n                        setSelected(c);\r\n                        setIsConfirmOpen(true);\r\n                      }}\r\n                    >\r\n                      <DynamicFaIcon\r\n                        name=\"trash\"\r\n                        color=\"var(--ion-color-danger-tint)\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </IonItem>\r\n              ))\r\n            : \"Sin categorias\"}\r\n        </IonList>\r\n      ) : (\r\n        \"Sin categorias\"\r\n      )}\r\n      <IonToast\r\n        isOpen={success.status}\r\n        onDidDismiss={() => setSuccess({ status: false, msg: \"\" })}\r\n        message={success.msg}\r\n        icon={informationCircle}\r\n        position=\"top\"\r\n        duration={2000}\r\n        color=\"success\"\r\n      />\r\n      <IonToast\r\n        isOpen={error.status}\r\n        onDidDismiss={() => setError({ status: false, msg: \"\" })}\r\n        message={error.msg}\r\n        icon={informationCircle}\r\n        position=\"top\"\r\n        duration={2000}\r\n        color=\"warning\"\r\n      />\r\n      <IonAlert\r\n        isOpen={isConfirmOpen}\r\n        onDidDismiss={() => setIsConfirmOpen(false)}\r\n        // cssClass='my-custom-class'\r\n        header={\"Eliminar Categoría\"}\r\n        message={\r\n          \"¿Seguro que quieres elimiar la categoría</br><strong>\" +\r\n          selected.name +\r\n          \"</strong>?\"\r\n        }\r\n        buttons={[\r\n          {\r\n            text: \"Cancelar\",\r\n            role: \"cancel\",\r\n            cssClass: \"secondary\",\r\n            id: \"cancel-button\",\r\n          },\r\n          {\r\n            text: \"Elimiar\",\r\n            id: \"confirm-button\",\r\n            handler: () => {\r\n              deleteCategoria(grupo, selected);\r\n            },\r\n          },\r\n        ]}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MClistcategorias;\r\n","import {\r\n  IonButton,\r\n  IonButtons,\r\n  IonContent,\r\n  IonInput,\r\n  IonItem,\r\n  IonLabel,\r\n  IonModal,\r\n  IonTitle,\r\n  IonToast,\r\n  IonToolbar,\r\n} from \"@ionic/react\";\r\nimport DynamicFaIcon from \"components/Generales/DynamicIcons/DynamicIcons\";\r\nimport MCcolores from \"components/Generales/MCcolores/mccolores\";\r\nimport MCiconos from \"components/Generales/MCiconos/mciconos\";\r\nimport MCloading from \"components/Generales/MCloading/MCloading\";\r\nimport useGrupos from \"hooks/useGrupos\";\r\nimport { informationCircle } from \"ionicons/icons\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"./mcnewcategoria.css\";\r\n\r\nconst MCnewcategoria = (props) => {\r\n  const {\r\n    error,\r\n    setError,\r\n    loadinggrupos,\r\n    success,\r\n    setSuccess,\r\n    createCategoria,\r\n  } = useGrupos();\r\n  const [submited, setSubmited] = useState(false);\r\n  const [newCategoria, setNewCategoria] = useState({\r\n    name: \"\",\r\n    icono: \"shirtOutline\",\r\n    color: \"#F44336\",\r\n  });\r\n\r\n  function changeColor(newValue) {\r\n    setNewCategoria({ ...newCategoria, color: newValue });\r\n  }\r\n\r\n  function changeIcono(newValue) {\r\n    setNewCategoria({ ...newCategoria, icono: newValue });\r\n  }\r\n  function createCat() {\r\n    setSubmited(true);\r\n    if (!newCategoria.name) {\r\n      setError({\r\n        status: true,\r\n        msg: \"El nombre de la categoría no puede estar vacio\",\r\n      });\r\n      setSubmited(false);\r\n      return;\r\n    } else {\r\n      createCategoria(props.grupo, newCategoria);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <IonContent>\r\n        {loadinggrupos ? (\r\n          <MCloading loading={true} />\r\n        ) : (\r\n          <>\r\n            <IonItem>\r\n              <IonLabel position=\"stacked\">\r\n                Introduce el nombre de la categoría\r\n                <span className=\"required\">*</span>\r\n              </IonLabel>\r\n              <IonInput\r\n                value={newCategoria.name}\r\n                placeholder=\"Introduce el nombre de la categoría\"\r\n                onIonChange={(e) =>\r\n                  setNewCategoria({ ...newCategoria, name: e.detail.value })\r\n                }\r\n                clearInput\r\n              ></IonInput>\r\n            </IonItem>\r\n            <MCcolores\r\n              onChange={changeColor}\r\n              colorSelected={newCategoria.color}\r\n            />\r\n            <MCiconos\r\n              onChange={changeIcono}\r\n              colorSelected={newCategoria.color}\r\n              iconoSelected={newCategoria.icono}\r\n              type=\"categories\"\r\n            />\r\n            <div className=\"buttons-div\">\r\n              <IonButton\r\n                className=\"boton-join\"\r\n                size=\"medium\"\r\n                shape=\"round\"\r\n                color=\"success\"\r\n                onClick={() => createCat()}\r\n                disabled={submited}\r\n              >\r\n                <IonLabel className=\"label\">Crear</IonLabel>\r\n                <DynamicFaIcon\r\n                  name=\"checkmarkOutline\"\r\n                  color=\"black\"\r\n                  slot=\"end\"\r\n                />\r\n              </IonButton>\r\n            </div>\r\n          </>\r\n        )}\r\n      </IonContent>\r\n\r\n      <IonToast\r\n        isOpen={error.status}\r\n        onDidDismiss={() => setError({ status: false, msg: \"\" })}\r\n        message={error.msg}\r\n        icon={informationCircle}\r\n        position=\"top\"\r\n        duration={2000}\r\n        color=\"danger\"\r\n      />\r\n      <IonToast\r\n        isOpen={success.status}\r\n        onDidDismiss={() => setSuccess({ status: false, msg: \"\" })}\r\n        message={success.msg}\r\n        icon={informationCircle}\r\n        position=\"top\"\r\n        duration={2000}\r\n        color=\"success\"\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MCnewcategoria;\r\n","import { IonContent, IonPage } from \"@ionic/react\";\r\nimport MClistcategorias from \"components/Grupos/MClistcategorias/mclistcategorias\";\r\nimport MCnewcategoria from \"components/Grupos/MCnewcategoria/mcnewcategoria\";\r\nimport useGrupos from \"hooks/useGrupos\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nimport \"swiper/css\";\r\nimport \"swiper/css/navigation\";\r\nimport \"./newcategoria.css\";\r\n\r\nconst NewCategoriaPage = () => {\r\n  let { groupUID } = useParams();\r\n  const { loadinggrupos, getGroup, grupoSelected } = useGrupos();\r\n\r\n  useEffect(() => {\r\n    getGroup(groupUID, true);\r\n  }, [groupUID]);\r\n\r\n  return (\r\n    <IonPage>\r\n      <IonContent fullscreen scrollX=\"false\" scrollY=\"false\">\r\n        {loadinggrupos ? (\r\n          <ClipLoader\r\n            color={\"blue\"}\r\n            loading={true}\r\n            css={\"display: block;margin: 0 auto\"}\r\n            size={150}\r\n          />\r\n        ) : (\r\n          <>\r\n            <MCnewcategoria grupo={grupoSelected} />\r\n          </>\r\n        )}\r\n      </IonContent>\r\n    </IonPage>\r\n  );\r\n};\r\n\r\nexport default NewCategoriaPage;\r\n"],"names":["props","colores","className","style","backgroundColor","colorSelected","slidesPerView","loop","map","c","index","borderColor","borderWidth","borderStyle","onClick","onChange","useState","iconosCuentas","iconos","setIconos","useEffect","type","iconosGrupos","iconosCategorias","i","iconoSelected","name","color","grupo","console","log","useGrupos","setError","grupos","loadinggrupos","error","success","setSuccess","deleteCategoria","isConfirmOpen","setIsConfirmOpen","selected","setSelected","categories","icono","slot","isOpen","status","onDidDismiss","msg","message","icon","informationCircle","position","duration","header","buttons","text","role","cssClass","id","handler","createCategoria","submited","setSubmited","newCategoria","setNewCategoria","MCloading","loading","value","placeholder","onIonChange","e","detail","clearInput","newValue","size","shape","createCat","disabled","groupUID","useParams","getGroup","grupoSelected","fullscreen","scrollX","scrollY","css"],"sourceRoot":""}