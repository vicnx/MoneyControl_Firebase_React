{"version":3,"file":"static/js/538.6e2bcadd.chunk.js","mappings":"sJA2BA,IAxBsB,SAAC,GAA2B,IAAzBA,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KAC9BC,EAAgBC,EAAMJ,GAE5B,OAAKG,EAUED,GACL,SAAC,KAAD,CACEG,MAAO,CAAEJ,MAAOA,GAAgB,SAChCK,KAAMH,EACND,KAAMA,GAAc,QAGtB,SAAC,KAAD,CAASG,MAAO,CAAEJ,MAAOA,GAAgB,SAAWK,KAAMH,KAfxD,SAAC,KAAD,CACEG,KAAMF,EAAAA,aACNC,MAAO,CAAEJ,MAAOA,GAAgB,SAChCC,KAAMA,GAAc,S,yICkE5B,EA/DoB,SAAC,GAAe,IAAbK,EAAY,EAAZA,MACrB,GAUIC,EAAAA,EAAAA,KAVJ,EACEC,OADF,EAEEC,cAFF,EAGEC,UAHF,EAIEC,WAJF,EAKEC,YALF,EAMEC,SANF,EAOEC,MAPF,EAQEC,QARF,EASEC,WAGF,OACE,iCACE,iBACEC,UAAU,oBACVb,MAAO,CAAEc,gBAAiBZ,EAAMN,OAFlC,WAIE,iBACEI,MACEE,EAAMP,KACFO,EAAMP,KAAKoB,OAAS,GAClB,CAAEC,SAAU,QACZ,CAAEA,SAAU,QACd,KANR,SASGd,EAAMP,OAERO,EAAMe,SACL,UAAC,KAAD,CAAQJ,UAAU,iBAAlB,WACE,SAAC,KAAD,CAAcjB,MAAM,UAAUiB,UAAU,uBAAxC,UACE,SAAC,IAAD,CAAelB,KAAM,mBAAoBC,MAAM,aAEjD,UAAC,KAAD,CAAYsB,KAAK,QAAQL,UAAU,kBAAnC,WACE,SAAC,KAAD,CAAcjB,MAAM,UAAUiB,UAAU,wBAAxC,UACE,SAAC,IAAD,CAAelB,KAAM,gBAAiBC,MAAM,aAE9C,SAAC,KAAD,CACEuB,WAAY,eAAiBjB,EAAMkB,MACnCC,gBAAgB,UAFlB,UAIE,SAAC,KAAD,CACEzB,MAAM,YACNiB,UAAU,wBAFZ,UAIE,SAAC,IAAD,CAAelB,KAAM,cAAeC,MAAM,qBAMlD,4BAGJ,SAAC,KAAD,CAAYiB,UAAU,2B,6BChC5B,EA5BsB,WACpB,IAAMS,GAAaC,EAAAA,EAAAA,MAAbD,SACN,GAAmDnB,EAAAA,EAAAA,KAA3CE,EAAR,EAAQA,cAAemB,EAAvB,EAAuBA,SAAUC,EAAjC,EAAiCA,cAMjC,OAJAC,EAAAA,EAAAA,YAAU,WACRF,EAASF,KACR,CAACA,EAAUE,KAGZ,SAAC,KAAD,WACE,SAAC,KAAD,CAAYG,YAAU,EAACC,QAAQ,QAAQC,QAAQ,QAA/C,SACGxB,GACC,SAAC,IAAD,CACET,MAAO,OACPkC,SAAS,EACTC,IAAK,gCACLC,KAAM,OAGR,+BACE,SAAC,EAAD,CAAa9B,MAAOuB","sources":["components/Generales/DynamicIcons/DynamicIcons.jsx","components/Grupos/MCinfogrupo/mcinfogrupo.jsx","pages/Grupos/InfoGrupo/InfoGrupo.jsx"],"sourcesContent":["import { IonIcon } from \"@ionic/react\";\r\nimport * as Icons from \"ionicons/icons\";\r\n\r\nconst DynamicFaIcon = ({ name, color, slot }) => {\r\n  const IconComponent = Icons[name];\r\n\r\n  if (!IconComponent) {\r\n    return (\r\n      <IonIcon\r\n        icon={Icons.imageOutline}\r\n        style={{ color: color ? color : \"black\" }}\r\n        slot={slot ? slot : null}\r\n      />\r\n    );\r\n  }\r\n\r\n  return slot ? (\r\n    <IonIcon\r\n      style={{ color: color ? color : \"black\" }}\r\n      icon={IconComponent}\r\n      slot={slot ? slot : null}\r\n    />\r\n  ) : (\r\n    <IonIcon style={{ color: color ? color : \"black\" }} icon={IconComponent} />\r\n  );\r\n};\r\n\r\nexport default DynamicFaIcon;\r\n","import {\r\n  IonContent,\r\n  IonFab,\r\n  IonFabButton,\r\n  IonFabList,\r\n  IonRouterLink,\r\n} from \"@ionic/react\";\r\nimport DynamicFaIcon from \"components/Generales/DynamicIcons/DynamicIcons\";\r\nimport useGrupos from \"hooks/useGrupos\";\r\nimport React, { useEffect } from \"react\";\r\nimport \"swiper/css\";\r\nimport \"swiper/css/navigation\";\r\nimport \"./mcinfogrupo.css\";\r\n\r\nconst MCinfogrupo = ({ grupo }) => {\r\n  const {\r\n    grupos,\r\n    loadinggrupos,\r\n    exitGroup,\r\n    checkAdmin,\r\n    deleteGroup,\r\n    setError,\r\n    error,\r\n    success,\r\n    setSuccess,\r\n  } = useGrupos();\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"header-info-grupo\"\r\n        style={{ backgroundColor: grupo.color }}\r\n      >\r\n        <span\r\n          style={\r\n            grupo.name\r\n              ? grupo.name.length < 10\r\n                ? { fontSize: \"30px\" }\r\n                : { fontSize: \"20px\" }\r\n              : null\r\n          }\r\n        >\r\n          {grupo.name}\r\n        </span>\r\n        {grupo.isAdmin ? (\r\n          <IonFab className=\"grupo-info-fab\">\r\n            <IonFabButton color=\"success\" className=\"grupo-info-fab-first\">\r\n              <DynamicFaIcon name={\"arrowBackOutline\"} color=\"white\" />\r\n            </IonFabButton>\r\n            <IonFabList side=\"start\" className=\"grupo-info-list\">\r\n              <IonFabButton color=\"warning\" className=\"grupo-info-fab-button\">\r\n                <DynamicFaIcon name={\"pencilOutline\"} color=\"black\" />\r\n              </IonFabButton>\r\n              <IonRouterLink\r\n                routerLink={\"/categories/\" + grupo.docid}\r\n                routerDirection=\"forward\"\r\n              >\r\n                <IonFabButton\r\n                  color=\"secondary\"\r\n                  className=\"grupo-info-fab-button\"\r\n                >\r\n                  <DynamicFaIcon name={\"appsOutline\"} color=\"black\" />\r\n                </IonFabButton>\r\n              </IonRouterLink>\r\n            </IonFabList>\r\n          </IonFab>\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </div>\r\n      <IonContent className=\"content-info-grupo\">\r\n        {/* <MClistgrupos /> */}\r\n      </IonContent>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MCinfogrupo;\r\n","import { IonContent, IonPage } from \"@ionic/react\";\r\nimport MCinfogrupo from \"components/Grupos/MCinfogrupo/mcinfogrupo\";\r\nimport useGrupos from \"hooks/useGrupos\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nimport \"swiper/css\";\r\nimport \"swiper/css/navigation\";\r\nimport \"./InfoGrupo.css\";\r\n\r\nconst InfoGrupoPage = () => {\r\n  let { groupUID } = useParams();\r\n  const { loadinggrupos, getGroup, grupoSelected } = useGrupos();\r\n\r\n  useEffect(() => {\r\n    getGroup(groupUID);\r\n  }, [groupUID, getGroup]);\r\n\r\n  return (\r\n    <IonPage>\r\n      <IonContent fullscreen scrollX=\"false\" scrollY=\"false\">\r\n        {loadinggrupos ? (\r\n          <ClipLoader\r\n            color={\"blue\"}\r\n            loading={true}\r\n            css={\"display: block;margin: 0 auto\"}\r\n            size={150}\r\n          />\r\n        ) : (\r\n          <>\r\n            <MCinfogrupo grupo={grupoSelected} />\r\n          </>\r\n        )}\r\n      </IonContent>\r\n    </IonPage>\r\n  );\r\n};\r\n\r\nexport default InfoGrupoPage;\r\n"],"names":["name","color","slot","IconComponent","Icons","style","icon","grupo","useGrupos","grupos","loadinggrupos","exitGroup","checkAdmin","deleteGroup","setError","error","success","setSuccess","className","backgroundColor","length","fontSize","isAdmin","side","routerLink","docid","routerDirection","groupUID","useParams","getGroup","grupoSelected","useEffect","fullscreen","scrollX","scrollY","loading","css","size"],"sourceRoot":""}